'scopeName': 'source.as'
'fileTypes': [
  'as'
]
'name': 'Arrow'
'patterns': [
  # General (line) comment
  {
    'begin': '(^[ \\t]+)?(?=//)'
    'beginCaptures':
      '1':
        'name': 'punctuation.whitespace.comment.leading.arrow'
    'end': '(?!\\G)'
    'patterns': [
      {
        'begin': '//'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.arrow'
        'end': '\\n'
        'name': 'comment.line.arrow'
      }
    ]
  }

  # Integer (literals)
  {
    'match': '\\b(?i:(0[xX]\\h*))'
    'name': 'constant.numeric.integer.hexadecimal.arrow'
  }
  {
    'match': '\\b(?i:(0[oO][0-7]+))'
    'name': 'constant.numeric.integer.octal.arrow'
  }
  {
    'match': '\\b(?i:(0[bB][01]+))',
    'name': 'constant.numeric.integer.binary.arrow'
  }
  {
    'match': '\\b(?i:(\\d+e[\\-\\+]?\\d+))'
    'name': 'constant.numeric.float.arrow'
  }
  {
    'match': '\\b([1-9]+[0-9]*|0)'
    'name': 'constant.numeric.integer.arrow'
  }

  # Operators: Arithmetic
  {
    'match': '\\+|\\-|\\*|/|%|&|\\||\\^|~'
    'name': 'keyword.operator.arithmetic.arrow'
  }
  {
    'match': '\\='
    'name': 'keyword.operator.assignment.arrow'
  }

  # Basic types
  {
    'match': '\\b(bool|char|float(32|64)|(u)?int(8|16|32|64|128))\\b'
    'name': 'support.type.arrow'
  }
]
