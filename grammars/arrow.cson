'scopeName': 'source.arrow'
'fileTypes': [
  'as'
]
'name': 'Arrow'
'patterns': [
  {
    'include': '#comment'
  }
  {
    'include': '#real'
  }
  {
    'include': '#integer'
  }
  {
    'include': '#bool'
  }
  {
    'include': '#variable'
  }
  {
    'include': '#type_builtin'
  }
]

'repository':
  # Line Comment `// ...`
  'comment':
    'begin': '(^[ \\t]+)?(?=//)'
    'beginCaptures':
      '1':
        'name': 'punctuation.whitespace.comment.leading.arrow'
    'end': '(?!\\G)'
    'patterns': [
      {
        'begin': '//'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.arrow'
        'end': '\\n'
        'name': 'comment.line.arrow'
      }
    ]
  # Integer
  'integer':
    'patterns': [
      # Integer: Hexadecimal
      {
        'match': '\\b(?i:(0x[a-z0-9]([a-z0-9]|_(?!\\b))*))'
        'name': 'constant.numeric.integer.hexadecimal.arrow'
      }
      # Integer: Binary
      {
        'match': '\\b(?i:(0b[0-1]([0-1]|_(?!\\b))*))'
        'name': 'constant.numeric.integer.binary.arrow'
      }
      # Integer: Octal
      {
        'match': '\\b(?i:(0o[0-7]([0-7]|_(?!\\b))*))'
        'name': 'constant.numeric.integer.octal.arrow'
      }
      # Integer: Octal
      {
        'match': '\\b([0-9]([0-9]|_(?!\\b))*)'
        'name': 'constant.numeric.integer.octal.arrow'
      }
    ]
  # Real
  'real':
    'patterns': [
      {
        'match': '\\b(?i:(\\d+\\.\\d*(e[\\-\\+]?\\d+)?))(?=[^a-zA-Z_])'
        'name': 'constant.numeric.float.arrow'
      }
      {
        'match': '(?<=[^0-9a-zA-Z_])(?i:(\\.\\d+(e[\\-\\+]?\\d+)?))'
        'name': 'constant.numeric.float.arrow'
      }
      {
        'match': '\\b(?i:(\\d+e[\\-\\+]?\\d+))'
        'name': 'constant.numeric.float.arrow'
      }
    ]
  # Boolean: true | false
  'bool':
    'match': '\\b(true|false)\\b'
    'name': 'constant.language.boolean.$1.arrow'
  # Type (builtin)
  'type_builtin':
    'match': '\\b(float(32|64)|u?int(8|16|32|64|128)|bool|str)\\b'
    'name': 'support.type.arrow'
  # Variable
  'variable':
    'begin': '^\\s*(let)(?:\\s+(mutable))?\\s+([A-Za-z_][A-Za-z_0-9]*)\\s*'
    'beginCaptures':
      '1': 'name': 'keyword.let.arrow'
      '2': 'name': 'storage.modifier.mutable.arrow'
      '3': 'name': 'variable.other.arrow'
    'end': '(?=;|$)'
    'patterns': [
      {
        'begin': '\\s*(:)\\s*'
        'beginCaptures':
          '1': 'name': 'punctuation.seperator.arrow'
        'end': '(?=\\=|;|$)'
        'patterns': [
          {
            'include': "$self"
          }
        ]
      }
      {
        'begin': '\\s*(=)\\s*'
        'beginCaptures':
          '1': 'name': 'punctuation.operator.arrow'
        'end': '(?=;|$)'
        'patterns': [
          {
            'include': "$self"
          }
        ]
      }
    ]
