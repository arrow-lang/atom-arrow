'scopeName': 'source.as'
'fileTypes': [
  'as'
]
'name': 'Arrow'
'patterns': [
  # General (line) comment
  {
    'begin': '(^[ \\t]+)?(?=//)'
    'beginCaptures':
      '1':
        'name': 'punctuation.whitespace.comment.leading.arrow'
    'end': '(?!\\G)'
    'patterns': [
      {
        'begin': '//'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.arrow'
        'end': '\\n'
        'name': 'comment.line.arrow'
      }
    ]
  }

  # Literal: Integer
  {
    'match': '\\b(?i:(0[xX]\\h*))'
    'name': 'constant.numeric.integer.hexadecimal.arrow'
  }
  {
    'match': '\\b(?i:(0[oO][0-7]+))'
    'name': 'constant.numeric.integer.octal.arrow'
  }
  {
    'match': '\\b(?i:(0[bB][01]+))',
    'name': 'constant.numeric.integer.binary.arrow'
  }
  {
    'match': '\\b(?i:(\\d+e[\\-\\+]?\\d+))'
    'name': 'constant.numeric.float.arrow'
  }
  {
    'match': '\\b([1-9]+[0-9]*|0)'
    'name': 'constant.numeric.integer.arrow'
  }

  # Literal: Boolean
  {
    'match': '\\b(true|false)\\b'
    'name': 'constant.language.arrow'
  }

  # Operators: Arithmetic
  {
    'match': '\\+|\\-|\\*|/|%|&|\\||\\^|~'
    'name': 'keyword.operator.arithmetic.arrow'
  }
  {
    'match': '\\='
    'name': 'keyword.operator.assignment.arrow'
  }

  # Types: Storage
  {
    'match': '\\b(float(32|64)|(u)?int(8|16|32|64|128))\\b'
    'name': 'storage.type.arrow'
  }

  # Storage Modifier
  {
    'match': '\\b(mutable)\\b'
    'name': 'storage.modifier.mutable.arrow'
  }

  # Types: Basic
  {
    'match': '\\b(str|bool|char|byte|float|int)\\b'
    'name': 'support.type.arrow'
  }

  # Keyword: Conditional
  {
    'name': 'keyword.control.conditional.arrow'
    'match': '\\b(if|else)\\b'
  }

  # Keyword: Loop
  {
    'name': 'keyword.control.repeat.arrow'
    'match': '\\b(for|while)\\b'
  }

  # Keyword: Alter
  {
    'name': 'keyword.control.statement.arrow'
    'match': '\\b(break|continue|return)\\b'
  }

  # String
  {
    'include': '#string_quoted_double'
  }
]

'repository':
  'string_quoted_double':
    'patterns': [
      {
        'begin': '(")'
        'beginCaptures':
          '1':
            'name': 'storage.type.string.arrow'
          '2':
            'name': 'punctuation.definition.string.begin.arrow'
        'end': '((?<=")(")|")|(\\n)'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.string.end.arrow'
          '2':
            'name': 'meta.empty-string.double.arrow'
          '3':
            'name': 'invalid.illegal.unclosed-string.arrow'
        'name': 'string.quoted.double.single-line.arrow'
        'patterns': [
          # {
          #   'include': '#escaped_unicode_char'
          # }
          # {
          #   'include': '#escaped_char'
          # }
        ]
      }
    ]
