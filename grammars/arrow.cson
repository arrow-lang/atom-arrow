'scopeName': 'source.arrow'
'fileTypes': [
  'as'
]
'name': 'Arrow'
'patterns': [
  {
    'include': '#string'
  }
  {
    'include': '#comment'
  }
  {
    'include': '#real'
  }
  {
    'include': '#integer'
  }
  {
    'include': '#bool'
  }
  {
    'include': '#block'
  }
  {
    'include': '#variable'
  }
  {
    'include': '#function'
  }
  {
    'include': '#call'
  }
  {
    'include': '#type_builtin'
  }
  {
    'include': '#import'
  }
  {
    'include': '#keywords'
  }
]
'repository':
  # Keywords
  'keywords':
    'patterns': [
      {
        'match': '\\b(if|else)\\b'
        'name': 'keyword.control.conditional.arrow'
      }
      {
        'match': '\\b(while)\\b'
        'name': 'keyword.control.repeat.arrow'
      }
      {
        'match': '\\b(break|continue|return)\\b'
        'name': 'keyword.control.statement.arrow'
      }
      {
        'match': '\\b(let|def|as|struct|implement|mutable)\\b'
        'name': 'keyword.$1.arrow'
      }
    ]
  # Line Comment `// ...`
  'comment':
    'begin': '(^[ \\t]+)?(?=//)'
    'beginCaptures':
      '1':
        'name': 'punctuation.whitespace.comment.leading.arrow'
    'end': '(?!\\G)'
    'patterns': [
      {
        'begin': '//'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.arrow'
        'end': '\\n'
        'name': 'comment.line.arrow'
      }
    ]
  # Integer
  'integer':
    'patterns': [
      # Integer: Hexadecimal
      {
        'match': '\\b(?i:(0x[a-z0-9]([a-z0-9]|_(?!\\b))*))'
        'name': 'constant.numeric.integer.hexadecimal.arrow'
      }
      # Integer: Binary
      {
        'match': '\\b(?i:(0b[0-1]([0-1]|_(?!\\b))*))'
        'name': 'constant.numeric.integer.binary.arrow'
      }
      # Integer: Octal
      {
        'match': '\\b(?i:(0o[0-7]([0-7]|_(?!\\b))*))'
        'name': 'constant.numeric.integer.octal.arrow'
      }
      # Integer: Octal
      {
        'match': '\\b([0-9]([0-9]|_(?!\\b))*)'
        'name': 'constant.numeric.integer.octal.arrow'
      }
    ]
  # Real
  'real':
    'patterns': [
      {
        'match': '\\b(?i:(\\d+\\.\\d*(e[\\-\\+]?\\d+)?))(?=[^a-zA-Z_])'
        'name': 'constant.numeric.float.arrow'
      }
      {
        'match': '(?<=[^0-9a-zA-Z_])(?i:(\\.\\d+(e[\\-\\+]?\\d+)?))'
        'name': 'constant.numeric.float.arrow'
      }
      {
        'match': '\\b(?i:(\\d+e[\\-\\+]?\\d+))'
        'name': 'constant.numeric.float.arrow'
      }
    ]
  # Boolean: true | false
  'bool':
    'match': '\\b(true|false)\\b'
    'name': 'constant.language.boolean.$1.arrow'
  # Type (builtin)
  'type_builtin':
    'match': '\\b(float(32|64)|u?int(8|16|32|64|128)|bool|str)\\b'
    'name': 'support.type.arrow'
  # String
  'string':
    'begin': '(")'
    'beginCaptures':
      '1':
        'name': 'punctuation.definition.string.begin.arrow'
    'end': '((?<=")(")|")|(\\n)'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.string.end.arrow'
      '2':
        'name': 'meta.empty-string.double.arrow'
      '3':
        'name': 'invalid.illegal.unclosed-string.arrow'
    'name': 'string.quoted.double.single-line.unicode.arrow'
    'patterns': [
      {
        'include': '#escaped_char'
      }
      {
        'match': '\\\\.'
        'name': 'invalid.illegal.invalid-character-escape.arrow'
      }
    ]
  'escaped_char':
    'captures':
      '1':
        'name': 'constant.character.escape.hex.arrow'
      '2':
        'name': 'constant.character.escape.octal.arrow'
      '3':
        'name': 'constant.character.escape.newline.arrow'
      '4':
        'name': 'constant.character.escape.backlash.arrow'
      '5':
        'name': 'constant.character.escape.double-quote.arrow'
      '6':
        'name': 'constant.character.escape.single-quote.arrow'
      '7':
        'name': 'constant.character.escape.bell.arrow'
      '8':
        'name': 'constant.character.escape.backspace.arrow'
      '9':
        'name': 'constant.character.escape.formfeed.arrow'
      '10':
        'name': 'constant.character.escape.linefeed.arrow'
      '11':
        'name': 'constant.character.escape.return.arrow'
      '12':
        'name': 'constant.character.escape.tab.arrow'
      '13':
        'name': 'constant.character.escape.vertical-tab.arrow'
    'match': '(\\\\x[0-9A-Fa-f]{2})|(\\\\[0-7]{3})|(\\\\\\n)|(\\\\\\\\)|(\\\\\\")|(\\\\\')|(\\\\a)|(\\\\b)|(\\\\f)|(\\\\n)|(\\\\r)|(\\\\t)|(\\\\v)'
  # Import
  'import':
    'begin': '^\\s*(import)'
    'beginCaptures':
      '1': 'name': 'keyword.import.arrow'
    'end': '(?=\\n|//|;)'
    'name': 'meta.import.arrow'
    'patterns': [
      {
        'include': '#string'
      }
      {
        'match': '\\b(as)\\b'
        'name': 'keyword.as.arrow'
      }
    ]
  # Variable
  'variable':
    'begin': '^\\s*(let)(?:\\s+(mutable))?\\s+([A-Za-z_][A-Za-z_0-9]*)\\s*'
    'beginCaptures':
      '1': 'name': 'keyword.let.arrow'
      '2': 'name': 'storage.modifier.mutable.arrow'
      '3': 'name': 'variable.other.arrow'
    'end': '(?=;|$)'
    'patterns': [
      {
        'begin': '\\s*(:)\\s*'
        'beginCaptures':
          '1': 'name': 'punctuation.seperator.arrow'
        'end': '(?=\\=|;|$)'
        'patterns': [
          {
            'include': "$self"
          }
        ]
      }
      {
        'begin': '\\s*(=)\\s*'
        'beginCaptures':
          '1': 'name': 'punctuation.operator.arrow'
        'end': '(?=;|$)'
        'patterns': [
          {
            'include': "$self"
          }
        ]
      }
    ]
  # Block
  'block':
    'begin': '(\\{)'
    'beginCaptures':
      '1': 'name': 'punctuation.section.block.begin.arrow'
    'end': '(\\})'
    'endCaptures':
      '1': 'name': 'punctuation.section.block.end.arrow'
    'patterns': [
      {
        'include': "$self"
      }
    ]
  # Function (Call)
  'call':
    'name': 'meta.function-call.arrow'
    'match': '([A-Za-z_][A-Za-z_0-9]*)\\s*(?=\\()'
    'captures':
      '1': 'name': 'entity.name.function.arrow'
  # Function (Declaration)
  'function':
    'begin': '^\\s*(def)\\s+([A-Za-z_][A-Za-z_0-9]*)\\s*'
    'beginCaptures':
      '1': 'name': 'keyword.def.arrow'
      '2': 'name': 'entity.name.function.arrow'
    'end': '(\\})'
    'endCaptures':
      '1': 'name': 'punctuation.section.function.end.arrow'
    'name': 'meta.function.arrow'
    'patterns': [
      {
        'begin': '\\G\\s*(\\()'
        'beginCaptures':
          '1': 'name': 'punctuation.definition.parameters.begin.arrow'
        'end': '(\\))'
        'endCaptures':
          '1': 'name': 'punctuation.definition.parameters.end.arrow'
        'patterns': [
          {
            'match': '([A-Za-z_][A-Za-z_0-9]*)\\s*(\\:)\\s*'
            'captures':
              '1': 'name': 'variable.parameter.function.arrow'
              '2': 'name': 'punctuation.seperator.arrow'
          }
          {
            'match': '(\\,)'
            'name': 'punctuation.seperator.parameters.arrow'
          }
          {
            'include': '$self'
          }
        ]
      }
      {
        'begin': '(\\{)'
        'beginCaptures':
          '1': 'name': 'punctuation.section.function.begin.arrow'
        'end': '(?=\\})'
        'patterns': [
          {
            'include': "$self"
          }
        ]
      }
      {
        'include': '$self'
      }
    ]
